# BEGIN softGlue.iocsh ----------------------------------------------------------

epicsEnvSet("IPORT", "AXI0INT")
epicsEnvSet("SPORT", "AXI0")
epicsEnvSet("RPORT", "AXI1")
epicsEnvSet("PREFIX", "zzz:")
epicsEnvSet("INSTANCE", "SG:")
epicsEnvSet("CONFIG", "SG")
epicsEnvSet("READEVENT", "10")


#var devAsynSoftGlueDebug,1
#var drvZynqDebug,10
################################################################################
#    Initialize the FPGA
#-----------------------
#    Write content to the FPGA.    This command will fail if the FPGA already
#    has content loaded, as it will after a soft reboot.  To load new FPGA
#    content, you must power cycle the ioc.
#
#    initIP_EP200_FPGA(ushort carrier, ushort slot, char *filename)
#    carrier:  IP-carrier number (numbering begins at 0)
#    slot:     IP-slot number (numbering begins at 0)
#    filename: Name of the FPGA-content hex file to load into the FPGA.
#

system("cat $(SOFTGLUEZYNQ)/softGlueApp/Db/softGlue_FPGAContent_7010.bin >/dev/xdevcfg")
#system("cat $(SOFTGLUEZYNQ)/softGlueApp/Db/softGlue_FPGAContent_7020.bin >/dev/xdevcfg")

#-------------------------------------------------------------------------------
#int initZynqInterrupts(const char *portName, int AXI_Address) {
#    portName: Name of asyn port for component at sopcOffset
#    AXI_Address:     AXI_Address.
#
# For example:
# initZynqInterrupts("AXI0INT",0x43c10000)
initZynqInterrupts("$(IPORT)",0x43c10000)

################################################################################
#    Initialize softGlue signal-name support
#-------------------------------------------
#    All instances of a single-register component are initialized with a single
#    call, as follows:
#
# initZynqSingleRegisterPort(const char *portName, int AXI_BaseAddress)
#
# For example:
# initZynqSingleRegisterPort("$(SPORT)", 0x43C00000)
# !!! For now, SPORT MUST come first, RPORT MUST come second
initZynqSingleRegisterPort("$(SPORT)", 0x43C00000)
initZynqSingleRegisterPort("$(RPORT)", 0x43C20000)


################################################################################
#    Load databases
#------------------
#    Load a single database that all database fragments supporting
#    single-register components can use to show which signals are connected
#    together.  This database is not needed for the functioning of the
#    components, it's purely for the user interface.
dbLoadRecords("$(SOFTGLUEZYNQ)/db/softGlue_SignalShow.db","P=$(PREFIX),H=$(INSTANCE),PORT=$(SPORT),READEVENT=$(READEVENT)")

#    Load a set of database fragments for each single-register component.
# This database contains the records for standard softGlue, and must be loaded
# for all .hex files above 
dbLoadRecords("$(SOFTGLUEZYNQ)/db/softGlue_FPGAContent.db", "P=$(PREFIX),H=$(INSTANCE),PORT=$(SPORT),READEVENT=$(READEVENT)")
dbLoadRecords("$(SOFTGLUEZYNQ)/db/softGlue_FPGARegisters.db", "P=$(PREFIX),H=$(INSTANCE),PORT=$(RPORT),READEVENT=$(READEVENT)")


#    Interrupt support.
dbLoadRecords("$(SOFTGLUEZYNQ)/db/softGlue_FPGAInt.db","P=$(PREFIX),H=$(INSTANCE),IPORT=$(IPORT)")

#    Some stuff just for convenience: software clock and pulse generators, and
#    a couple of busy records.
dbLoadRecords("$(SOFTGLUEZYNQ)/db/softGlue_convenience.db", "P=$(PREFIX),H=$(INSTANCE)")

# Menu of softGlue circuits
# configMenu example.  See create_manual_set() command after iocInit.
dbLoadRecords("$(AUTOSAVE)/asApp/Db/configMenu.db","P=$(PREFIX),CONFIG=$(CONFIG)")
# Note that the request file MUST be named $(CONFIG)Menu.req.  If the macro
# CONFIGMENU is defined with any value, backup (".savB") and sequence files
# (".savN") will not be written.  We don't want these for configMenu.
doAfterIocInit("create_manual_set('$(CONFIG)Menu.req','P=$(PREFIX),CONFIG=$(CONFIG),H=$(INSTANCE),CONFIGMENU=1')")

# Register included example of a custom softGlue interrupt-service routine.
# This is for interrupts that occur too closely spaced in time for softGlue's
# normal interrupt service (an output link to an EPICS record) to handle.
# Note that this command must be issued after iocInit.
#doAfterIocInit("sampleCustomInterruptPrepare(0x10000, 0x0)")

# attach pixelTrigger histogrammer to FO_16 interrupt.
# test
#doAfterIocInit("pixelTriggerPrepare(0x43C30000, 0x80000000, 100, 100, 7)")
# asub
doAfterIocInit("pixelTriggerPrepare(0x43C30000, 0x80000000)")
dbLoadRecords("$(SOFTGLUEZYNQ)/db/pixelTrigger.db","P=$(PREFIX),Q=1,N=1000000")

# debug:
dbLoadRecords("$(ASYN)/db/asynRecord.db","P=zzz:,R=asynSoftGlue,PORT=$(SPORT),ADDR=0,OMAX=0,IMAX=0")
dbLoadRecords("$(ASYN)/db/asynRecord.db","P=zzz:,R=asynSoftGlueReg,PORT=$(RPORT),ADDR=0,OMAX=0,IMAX=0")
# END softGlue.cmd ------------------------------------------------------------
